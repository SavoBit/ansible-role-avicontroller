---
# We must do this step first just in case we need to override defaults from the supplied package
- name: Avi Controller | Docker | Package Deploy
  include: docker/package_deploy.yml
  when: package_deploy

- name: Avi Controller | Docker | Check if specified image already exists.
  shell: "docker images -q {{ con_image }}"
  changed_when: false
  register: docker_match

- name: Avi Controller | Docker | Docker Hub
  include: docker/docker_hub.yml
  when: docker_repo == None and not package_deploy

- name: Avi Controller | Docker | Custom Repo
  include: docker/custom_repo.yml
  when: docker_repo != None and not package_deploy

- name: Avi Controller | Docker | Get our desired docker image id.
  shell: "docker images -q {{ con_image }}"
  changed_when: false
  register: docker_image

- name: Avi Controller | Docker | Get list of running avicontroller containers
  shell: "docker ps -q -f name=avicontroller"
  changed_when: false
  register: running_con_containers

- name: Avi Controller | Docker | Check if desired version is already running.
  shell: "docker ps -q -f ancestor={{ docker_image.stdout }}"
  changed_when: false
  register: desired_running

- name: Avi Controller | Check for an existing avicontroller service
  stat:
    path: "{{ item }}"
  register: service_installed
  with_items:
    - /etc/systemd/system/avicontroller.service
    - /etc/init.d/avicontroller
    - /etc/init/avicontroller.conf

- name: Avi Controller | Detect if service avicontroller_watcher is in use
  stat:
    path: "/etc/init.d/avicontroller_watcher"
  register: avicontroller_watcher_status

- name: Avi Controller | Stop the avicontroller_watcher service
  service: name=avicontroller enabled=no state=stopped
  when: avicontroller_watcher_status.stat.exists == true and desired_running.stdout == ""

- name: Avi Controller | Stop avicontroller service
  service: name=avicontroller enabled=no state=stopped
  register: stopped_service
  when:
    - "{{ item.stat.exists }} == true"
    - desired_running.stdout == ""
  with_items: "{{ service_installed.results }}"

- name: Avi Controller | Docker | Stop and Remove the container if it's not the desired version.
  shell: "docker stop {{ item }} && docker rm -f {{ item }}"
  with_items:
    - "{{ running_con_containers.stdout_lines }}"
  when:
    - item not in desired_running.stdout_lines
    - not stopped_service.changed

- name: Avi Controller | Docker | Get list of non-matched controller images.
  shell: "docker images | grep -v REPOSITORY | grep -v {{ con_version }} | grep avinetworks/controller | awk '{print $3}'"
  changed_when: false
  register: non_matched_images

- name: Avi Controller | Docker | Remove non-matched controller images.
  shell: "docker rmi -f {{ non_matched_images.stdout_lines|join(' ') }}"
  changed_when: false
  when: non_matched_images.stdout != ""
